 /*filename: ISSP_Vectors.h
*/
#include "issp_revision.h"
#ifdef PROJECT_REV_304

/*
* Copyright 2006-2007, Cypress Semiconductor Corporation.

* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
* MA  02110-1301, USA.
*/

#ifndef INC_ISSP_VECTORS
#define INC_ISSP_VECTORS

#include "issp_directives.h"

#ifdef CY8C21234
	/* ID for CY8CTMA300D_36LQXI */
	unsigned char target_id_v[] = {0x00, 0x36};
#endif
#ifdef CY8C21334
	/* ID for CY8CTMA300D_36LQXI */
	unsigned char target_id_v[] = {0x00, 0x37};
#endif
#ifdef CY8C21434
	/* ID for CY8CTMA300D_36LQXI */
	unsigned char target_id_v[] = {0x00, 0x38};
#endif
#ifdef CY8C21534
	/* ID for CY8CTMA300D_36LQXI */
	unsigned char target_id_v[] = {0x00, 0x40};
#endif
#ifdef CY8C20234
	/*ID for CY8C20234 */
	unsigned char target_id_v[] = {0x00, 0x68};
#endif


const unsigned int num_bits_checksum = 286;
const unsigned char checksum_v[] = {
	0xDE, 0xE0, 0x1F, 0x7B, 0x00, 0x79, 0xF0, 0x75, 0xE7, 0xC8,
	0x1F, 0xDE, 0xA0, 0x1F, 0x7A, 0x01, 0xF9, 0xF7, 0x01, 0xF7,
	0xC9, 0x87, 0xDF, 0x48, 0x1E, 0x7D, 0x00, 0x7D, 0xE0, 0x0F,
	0xF7, 0xC0, 0x07, 0xDF, 0xE2, 0x5C
};


const unsigned int num_bits_id_setup_1 = 396;
const unsigned char id_setup_1[] = {
	0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0xEE, 0x01, 0xF7,
	0xB0, 0x07, 0x9F, 0x07, 0x5E, 0x7C, 0x81, 0xFD, 0xEA, 0x01,
	0xF7, 0xA0, 0x1F, 0x9F, 0x70, 0x1F, 0x7C, 0x98, 0x7D, 0xF4,
	0x81, 0xF7, 0x80, 0x4F, 0xDF, 0x00, 0x1F, 0x7F, 0x89, 0x70
};

const unsigned int num_bits_id_setup_2 = 330;
const unsigned char id_setup_2[] = {
	0xDE, 0xE2, 0x1F, 0x70, 0x01, 0x7D, 0xEE, 0x01, 0xF7, 0xB0,
	0x07, 0x9F, 0x07, 0x5E, 0x7C, 0x81, 0xFD, 0xEA, 0x01, 0xF7,
	0xA0, 0x1F, 0x9F, 0x70, 0x1F, 0x7C, 0x98, 0x7D, 0xF4, 0x81,
	0xE7, 0xD0, 0x07, 0xDE, 0x00, 0xDF, 0x7C, 0x00, 0x7D, 0xFE,
	0x25, 0xC0
};

const unsigned int num_bits_set_block_num = 11;
const unsigned char set_block_num[] = {
	0x9F, 0x40
};

const unsigned int num_bits_set_block_num_end = 3;
const unsigned char set_block_num_end = 0xE0;

const unsigned int num_bits_my_verify_setup = 264;
const unsigned char verify_setup[] = {
	0xDE, 0xE0, 0x1F, 0x7B, 0x00, 0x79, 0xF0, 0x75, 0xE7, 0xC8,
	0x1F, 0xDE, 0xA0, 0x1F, 0x7A, 0x01, 0xF9, 0xF7, 0x01, 0xF7,
	0xC9, 0x87, 0xDF, 0x48, 0x1F, 0x78, 0x00, 0xFD, 0xF0, 0x01,
	0xF7, 0xF8, 0x97
};

const unsigned int num_bits_erase = 308;
const unsigned char erase[] = {
	0x9F, 0x82, 0xBE, 0x7F, 0x2B, 0x7D, 0xEE, 0x01, 0xF7, 0xB0,
	0x07, 0x9F, 0x07, 0x5E, 0x7C, 0x81, 0xFD, 0xEA, 0x01, 0xF7,
	0xA0, 0x1F, 0x9F, 0x70, 0x1F, 0x7C, 0x98, 0x7D, 0xF4, 0x81,
	0xF7, 0x80, 0x2F, 0xDF, 0x00, 0x1F, 0x7F, 0x89, 0x70
};

const unsigned int num_bits_secure = 308;
const unsigned char secure[] = {
	0x9F, 0x8A, 0x9E, 0x7F, 0x2B, 0x7D, 0xEE, 0x01, 0xF7, 0xB0,
	0x07, 0x9F, 0x07, 0x5E, 0x7C, 0x81, 0xFD, 0xEA, 0x01, 0xF7,
	0xA0, 0x1F, 0x9F, 0x70, 0x1F, 0x7C, 0x98, 0x7D, 0xF4, 0x81,
	0xF7, 0x80, 0x27, 0xDF, 0x00, 0x1F, 0x7F, 0x89, 0x70
};

const unsigned int num_bits_program = 308;
const unsigned char program[] = {
	0x9F, 0x8A, 0x9E, 0x7F, 0x2B, 0x7D, 0xEE, 0x01, 0xF7, 0xB0,
	0x07, 0x9F, 0x07, 0x5E, 0x7C, 0x81, 0xFD, 0xEA, 0x01, 0xF7,
	0xA0, 0x1F, 0x9F, 0x70, 0x1F, 0x7C, 0x98, 0x7D, 0xF4, 0x81,
	0xF7, 0x80, 0x17, 0xDF, 0x00, 0x1F, 0x7F, 0x89, 0x70
};

const unsigned char read_id_v[] = {
	0xBF, 0x00, 0xDF, 0x90, 0x00, 0xFE, 0x60, 0xFF, 0x00
};

const unsigned char    write_byte_start = 0x90;
const unsigned char    write_byte_end = 0xE0;

const unsigned char    num_bits_wait_and_poll_end = 40;
const unsigned char    wait_and_poll_end[] = {
	0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char read_checksum_v[] = {
	0xBF, 0x20, 0xDF, 0x80, 0x80
};


const unsigned char read_byte_v[] = {
	0xB0, 0x80
};

#endif /* (INC_ISSP_VECTORS)
*/
#endif /* (PROJECT_REV_)
*/

 /*end of file ISSP_Vectors.h
*/
